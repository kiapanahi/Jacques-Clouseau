// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KafkaRestProxy.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class ClusterData : global::KafkaRestProxy.Client.Models.Resource, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The acls property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? Acls { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship Acls { get; set; }
#endif
        /// <summary>The broker_configs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? BrokerConfigs { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship BrokerConfigs { get; set; }
#endif
        /// <summary>The brokers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? Brokers { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship Brokers { get; set; }
#endif
        /// <summary>The cluster_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClusterId { get; set; }
#nullable restore
#else
        public string ClusterId { get; set; }
#endif
        /// <summary>The consumer_groups property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? ConsumerGroups { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship ConsumerGroups { get; set; }
#endif
        /// <summary>The controller property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? Controller { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship Controller { get; set; }
#endif
        /// <summary>The partition_reassignments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? PartitionReassignments { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship PartitionReassignments { get; set; }
#endif
        /// <summary>The topics property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? Topics { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship Topics { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KafkaRestProxy.Client.Models.ClusterData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::KafkaRestProxy.Client.Models.ClusterData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KafkaRestProxy.Client.Models.ClusterData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "acls", n => { Acls = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "broker_configs", n => { BrokerConfigs = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "brokers", n => { Brokers = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "cluster_id", n => { ClusterId = n.GetStringValue(); } },
                { "consumer_groups", n => { ConsumerGroups = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "controller", n => { Controller = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "partition_reassignments", n => { PartitionReassignments = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "topics", n => { Topics = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("acls", Acls);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("broker_configs", BrokerConfigs);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("brokers", Brokers);
            writer.WriteStringValue("cluster_id", ClusterId);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("consumer_groups", ConsumerGroups);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("controller", Controller);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("partition_reassignments", PartitionReassignments);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("topics", Topics);
        }
    }
}

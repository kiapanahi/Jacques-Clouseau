// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KafkaRestProxy.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class ConsumerGroupLagSummaryData : global::KafkaRestProxy.Client.Models.Resource, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The cluster_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClusterId { get; set; }
#nullable restore
#else
        public string ClusterId { get; set; }
#endif
        /// <summary>The consumer_group_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ConsumerGroupId { get; set; }
#nullable restore
#else
        public string ConsumerGroupId { get; set; }
#endif
        /// <summary>The max_lag property</summary>
        public long? MaxLag { get; set; }
        /// <summary>The max_lag_client_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaxLagClientId { get; set; }
#nullable restore
#else
        public string MaxLagClientId { get; set; }
#endif
        /// <summary>The max_lag_consumer property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? MaxLagConsumer { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship MaxLagConsumer { get; set; }
#endif
        /// <summary>The max_lag_consumer_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaxLagConsumerId { get; set; }
#nullable restore
#else
        public string MaxLagConsumerId { get; set; }
#endif
        /// <summary>The max_lag_instance_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaxLagInstanceId { get; set; }
#nullable restore
#else
        public string MaxLagInstanceId { get; set; }
#endif
        /// <summary>The max_lag_partition property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? MaxLagPartition { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship MaxLagPartition { get; set; }
#endif
        /// <summary>The max_lag_partition_id property</summary>
        public int? MaxLagPartitionId { get; set; }
        /// <summary>The max_lag_topic_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MaxLagTopicName { get; set; }
#nullable restore
#else
        public string MaxLagTopicName { get; set; }
#endif
        /// <summary>The total_lag property</summary>
        public long? TotalLag { get; set; }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KafkaRestProxy.Client.Models.ConsumerGroupLagSummaryData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::KafkaRestProxy.Client.Models.ConsumerGroupLagSummaryData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KafkaRestProxy.Client.Models.ConsumerGroupLagSummaryData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "cluster_id", n => { ClusterId = n.GetStringValue(); } },
                { "consumer_group_id", n => { ConsumerGroupId = n.GetStringValue(); } },
                { "max_lag", n => { MaxLag = n.GetLongValue(); } },
                { "max_lag_client_id", n => { MaxLagClientId = n.GetStringValue(); } },
                { "max_lag_consumer", n => { MaxLagConsumer = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "max_lag_consumer_id", n => { MaxLagConsumerId = n.GetStringValue(); } },
                { "max_lag_instance_id", n => { MaxLagInstanceId = n.GetStringValue(); } },
                { "max_lag_partition", n => { MaxLagPartition = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "max_lag_partition_id", n => { MaxLagPartitionId = n.GetIntValue(); } },
                { "max_lag_topic_name", n => { MaxLagTopicName = n.GetStringValue(); } },
                { "total_lag", n => { TotalLag = n.GetLongValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteStringValue("cluster_id", ClusterId);
            writer.WriteStringValue("consumer_group_id", ConsumerGroupId);
            writer.WriteLongValue("max_lag", MaxLag);
            writer.WriteStringValue("max_lag_client_id", MaxLagClientId);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("max_lag_consumer", MaxLagConsumer);
            writer.WriteStringValue("max_lag_consumer_id", MaxLagConsumerId);
            writer.WriteStringValue("max_lag_instance_id", MaxLagInstanceId);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("max_lag_partition", MaxLagPartition);
            writer.WriteIntValue("max_lag_partition_id", MaxLagPartitionId);
            writer.WriteStringValue("max_lag_topic_name", MaxLagTopicName);
            writer.WriteLongValue("total_lag", TotalLag);
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KafkaRestProxy.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class BrokerData : global::KafkaRestProxy.Client.Models.Resource, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The broker_id property</summary>
        public int? BrokerId { get; set; }
        /// <summary>The cluster_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClusterId { get; set; }
#nullable restore
#else
        public string ClusterId { get; set; }
#endif
        /// <summary>The configs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? Configs { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship Configs { get; set; }
#endif
        /// <summary>The host property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Host { get; set; }
#nullable restore
#else
        public string Host { get; set; }
#endif
        /// <summary>The partition_replicas property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? PartitionReplicas { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship PartitionReplicas { get; set; }
#endif
        /// <summary>The port property</summary>
        public int? Port { get; set; }
        /// <summary>The rack property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Rack { get; set; }
#nullable restore
#else
        public string Rack { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KafkaRestProxy.Client.Models.BrokerData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::KafkaRestProxy.Client.Models.BrokerData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KafkaRestProxy.Client.Models.BrokerData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "broker_id", n => { BrokerId = n.GetIntValue(); } },
                { "cluster_id", n => { ClusterId = n.GetStringValue(); } },
                { "configs", n => { Configs = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "host", n => { Host = n.GetStringValue(); } },
                { "partition_replicas", n => { PartitionReplicas = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "port", n => { Port = n.GetIntValue(); } },
                { "rack", n => { Rack = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteIntValue("broker_id", BrokerId);
            writer.WriteStringValue("cluster_id", ClusterId);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("configs", Configs);
            writer.WriteStringValue("host", Host);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("partition_replicas", PartitionReplicas);
            writer.WriteIntValue("port", Port);
            writer.WriteStringValue("rack", Rack);
        }
    }
}

// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KafkaRestProxy.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class ProduceBatchRequestEntry : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The headers property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<global::KafkaRestProxy.Client.Models.ProduceRequestHeader>? Headers { get; set; }
#nullable restore
#else
        public List<global::KafkaRestProxy.Client.Models.ProduceRequestHeader> Headers { get; set; }
#endif
        /// <summary>Batch entry ID.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Id { get; set; }
#nullable restore
#else
        public string Id { get; set; }
#endif
        /// <summary>The key property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.ProduceRequestData? Key { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.ProduceRequestData Key { get; set; }
#endif
        /// <summary>The partition_id property</summary>
        public int? PartitionId { get; set; }
        /// <summary>The timestamp property</summary>
        public DateTimeOffset? Timestamp { get; set; }
        /// <summary>The value property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.ProduceRequestData? Value { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.ProduceRequestData Value { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::KafkaRestProxy.Client.Models.ProduceBatchRequestEntry"/> and sets the default values.
        /// </summary>
        public ProduceBatchRequestEntry()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KafkaRestProxy.Client.Models.ProduceBatchRequestEntry"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KafkaRestProxy.Client.Models.ProduceBatchRequestEntry CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KafkaRestProxy.Client.Models.ProduceBatchRequestEntry();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "headers", n => { Headers = n.GetCollectionOfObjectValues<global::KafkaRestProxy.Client.Models.ProduceRequestHeader>(global::KafkaRestProxy.Client.Models.ProduceRequestHeader.CreateFromDiscriminatorValue)?.AsList(); } },
                { "id", n => { Id = n.GetStringValue(); } },
                { "key", n => { Key = n.GetObjectValue<global::KafkaRestProxy.Client.Models.ProduceRequestData>(global::KafkaRestProxy.Client.Models.ProduceRequestData.CreateFromDiscriminatorValue); } },
                { "partition_id", n => { PartitionId = n.GetIntValue(); } },
                { "timestamp", n => { Timestamp = n.GetDateTimeOffsetValue(); } },
                { "value", n => { Value = n.GetObjectValue<global::KafkaRestProxy.Client.Models.ProduceRequestData>(global::KafkaRestProxy.Client.Models.ProduceRequestData.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteCollectionOfObjectValues<global::KafkaRestProxy.Client.Models.ProduceRequestHeader>("headers", Headers);
            writer.WriteStringValue("id", Id);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.ProduceRequestData>("key", Key);
            writer.WriteIntValue("partition_id", PartitionId);
            writer.WriteDateTimeOffsetValue("timestamp", Timestamp);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.ProduceRequestData>("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

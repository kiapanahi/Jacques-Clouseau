// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KafkaRestProxy.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class TopicData : global::KafkaRestProxy.Client.Models.Resource, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>The authorized_operations property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public List<string>? AuthorizedOperations { get; set; }
#nullable restore
#else
        public List<string> AuthorizedOperations { get; set; }
#endif
        /// <summary>The cluster_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClusterId { get; set; }
#nullable restore
#else
        public string ClusterId { get; set; }
#endif
        /// <summary>The configs property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? Configs { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship Configs { get; set; }
#endif
        /// <summary>The is_internal property</summary>
        public bool? IsInternal { get; set; }
        /// <summary>The partition_reassignments property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? PartitionReassignments { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship PartitionReassignments { get; set; }
#endif
        /// <summary>The partitions property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.Relationship? Partitions { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.Relationship Partitions { get; set; }
#endif
        /// <summary>The partitions_count property</summary>
        public int? PartitionsCount { get; set; }
        /// <summary>The replication_factor property</summary>
        public int? ReplicationFactor { get; set; }
        /// <summary>The topic_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TopicName { get; set; }
#nullable restore
#else
        public string TopicName { get; set; }
#endif
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KafkaRestProxy.Client.Models.TopicData"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static new global::KafkaRestProxy.Client.Models.TopicData CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KafkaRestProxy.Client.Models.TopicData();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public override IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>(base.GetFieldDeserializers())
            {
                { "authorized_operations", n => { AuthorizedOperations = n.GetCollectionOfPrimitiveValues<string>()?.AsList(); } },
                { "cluster_id", n => { ClusterId = n.GetStringValue(); } },
                { "configs", n => { Configs = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "is_internal", n => { IsInternal = n.GetBoolValue(); } },
                { "partition_reassignments", n => { PartitionReassignments = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "partitions", n => { Partitions = n.GetObjectValue<global::KafkaRestProxy.Client.Models.Relationship>(global::KafkaRestProxy.Client.Models.Relationship.CreateFromDiscriminatorValue); } },
                { "partitions_count", n => { PartitionsCount = n.GetIntValue(); } },
                { "replication_factor", n => { ReplicationFactor = n.GetIntValue(); } },
                { "topic_name", n => { TopicName = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public override void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            base.Serialize(writer);
            writer.WriteCollectionOfPrimitiveValues<string>("authorized_operations", AuthorizedOperations);
            writer.WriteStringValue("cluster_id", ClusterId);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("configs", Configs);
            writer.WriteBoolValue("is_internal", IsInternal);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("partition_reassignments", PartitionReassignments);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.Relationship>("partitions", Partitions);
            writer.WriteIntValue("partitions_count", PartitionsCount);
            writer.WriteIntValue("replication_factor", ReplicationFactor);
            writer.WriteStringValue("topic_name", TopicName);
        }
    }
}

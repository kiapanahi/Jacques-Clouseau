// <auto-generated/>
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace KafkaRestProxy.Client.Models
{
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    #pragma warning disable CS1591
    public partial class ProduceResponse : IAdditionalDataHolder, IParsable
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>The cluster_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? ClusterId { get; set; }
#nullable restore
#else
        public string ClusterId { get; set; }
#endif
        /// <summary>The error_code property</summary>
        public int? ErrorCode { get; set; }
        /// <summary>The key property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.ProduceResponseData? Key { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.ProduceResponseData Key { get; set; }
#endif
        /// <summary>The message property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Message { get; set; }
#nullable restore
#else
        public string Message { get; set; }
#endif
        /// <summary>The offset property</summary>
        public long? Offset { get; set; }
        /// <summary>The partition_id property</summary>
        public int? PartitionId { get; set; }
        /// <summary>The timestamp property</summary>
        public DateTimeOffset? Timestamp { get; set; }
        /// <summary>The topic_name property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? TopicName { get; set; }
#nullable restore
#else
        public string TopicName { get; set; }
#endif
        /// <summary>The value property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::KafkaRestProxy.Client.Models.ProduceResponseData? Value { get; set; }
#nullable restore
#else
        public global::KafkaRestProxy.Client.Models.ProduceResponseData Value { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::KafkaRestProxy.Client.Models.ProduceResponse"/> and sets the default values.
        /// </summary>
        public ProduceResponse()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::KafkaRestProxy.Client.Models.ProduceResponse"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::KafkaRestProxy.Client.Models.ProduceResponse CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::KafkaRestProxy.Client.Models.ProduceResponse();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cluster_id", n => { ClusterId = n.GetStringValue(); } },
                { "error_code", n => { ErrorCode = n.GetIntValue(); } },
                { "key", n => { Key = n.GetObjectValue<global::KafkaRestProxy.Client.Models.ProduceResponseData>(global::KafkaRestProxy.Client.Models.ProduceResponseData.CreateFromDiscriminatorValue); } },
                { "message", n => { Message = n.GetStringValue(); } },
                { "offset", n => { Offset = n.GetLongValue(); } },
                { "partition_id", n => { PartitionId = n.GetIntValue(); } },
                { "timestamp", n => { Timestamp = n.GetDateTimeOffsetValue(); } },
                { "topic_name", n => { TopicName = n.GetStringValue(); } },
                { "value", n => { Value = n.GetObjectValue<global::KafkaRestProxy.Client.Models.ProduceResponseData>(global::KafkaRestProxy.Client.Models.ProduceResponseData.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteStringValue("cluster_id", ClusterId);
            writer.WriteIntValue("error_code", ErrorCode);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.ProduceResponseData>("key", Key);
            writer.WriteStringValue("message", Message);
            writer.WriteLongValue("offset", Offset);
            writer.WriteIntValue("partition_id", PartitionId);
            writer.WriteDateTimeOffsetValue("timestamp", Timestamp);
            writer.WriteStringValue("topic_name", TopicName);
            writer.WriteObjectValue<global::KafkaRestProxy.Client.Models.ProduceResponseData>("value", Value);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}

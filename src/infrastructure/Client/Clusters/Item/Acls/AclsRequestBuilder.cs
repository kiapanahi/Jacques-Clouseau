// <auto-generated/>
using KafkaRestProxy.Client.Models;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace KafkaRestProxy.Client.Clusters.Item.Acls
{
    /// <summary>
    /// Builds and executes requests for operations under \clusters\{cluster_id}\acls
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
    public partial class AclsRequestBuilder : BaseRequestBuilder
    {
        /// <summary>
        /// Instantiates a new <see cref="global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="pathParameters">Path parameters for the request</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AclsRequestBuilder(Dictionary<string, object> pathParameters, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/clusters/{cluster_id}/acls{?host*,operation*,pattern_type*,permission*,principal*,resource_name*,resource_type*}", pathParameters)
        {
        }
        /// <summary>
        /// Instantiates a new <see cref="global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder"/> and sets the default values.
        /// </summary>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public AclsRequestBuilder(string rawUrl, IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}/clusters/{cluster_id}/acls{?host*,operation*,pattern_type*,permission*,principal*,resource_name*,resource_type*}", rawUrl)
        {
        }
        /// <summary>
        /// [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)Delete the ACLs that match the search criteria.
        /// </summary>
        /// <returns>A <see cref="global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsDeleteResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsDeleteResponse?> DeleteAsAclsDeleteResponseAsync(Action<RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsDeleteResponse> DeleteAsAclsDeleteResponseAsync(Action<RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "401", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "5XX", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsDeleteResponse>(requestInfo, global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsDeleteResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)Delete the ACLs that match the search criteria.
        /// </summary>
        /// <returns>A <see cref="global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsResponse"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 5XX status code</exception>
        [Obsolete("This method is obsolete. Use DeleteAsAclsDeleteResponseAsync instead.")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsResponse?> DeleteAsync(Action<RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderDeleteQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsResponse> DeleteAsync(Action<RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderDeleteQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToDeleteRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "401", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "5XX", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsResponse>(requestInfo, global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsResponse.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)Return a list of ACLs that match the search criteria.
        /// </summary>
        /// <returns>A <see cref="global::KafkaRestProxy.Client.Models.AclDataList"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::KafkaRestProxy.Client.Models.AclDataList?> GetAsync(Action<RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderGetQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::KafkaRestProxy.Client.Models.AclDataList> GetAsync(Action<RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderGetQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "401", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "5XX", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::KafkaRestProxy.Client.Models.AclDataList>(requestInfo, global::KafkaRestProxy.Client.Models.AclDataList.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)Create an ACL.
        /// </summary>
        /// <param name="body">The request body</param>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 400 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 401 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 403 status code</exception>
        /// <exception cref="global::KafkaRestProxy.Client.Models.Error">When receiving a 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task PostAsync(global::KafkaRestProxy.Client.Models.CreateAclRequestData body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task PostAsync(global::KafkaRestProxy.Client.Models.CreateAclRequestData body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = ToPostRequestInformation(body, requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "400", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "401", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "403", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
                { "5XX", global::KafkaRestProxy.Client.Models.Error.CreateFromDiscriminatorValue },
            };
            await RequestAdapter.SendNoContentAsync(requestInfo, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)Delete the ACLs that match the search criteria.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderDeleteQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToDeleteRequestInformation(Action<RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderDeleteQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.DELETE, "{+baseurl}/clusters/{cluster_id}/acls?operation={operation}&pattern_type={pattern_type}&permission={permission}&resource_type={resource_type}{&host*,principal*,resource_name*}", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)Return a list of ACLs that match the search criteria.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderGetQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderGetQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)Create an ACL.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="body">The request body</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToPostRequestInformation(global::KafkaRestProxy.Client.Models.CreateAclRequestData body, Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToPostRequestInformation(global::KafkaRestProxy.Client.Models.CreateAclRequestData body, Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            _ = body ?? throw new ArgumentNullException(nameof(body));
            var requestInfo = new RequestInformation(Method.POST, "{+baseurl}/clusters/{cluster_id}/acls", PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            requestInfo.SetContentFromParsable(RequestAdapter, "application/json", body);
            return requestInfo;
        }
        /// <summary>
        /// Returns a request builder with the provided arbitrary URL. Using this method means any other path or query parameters are ignored.
        /// </summary>
        /// <returns>A <see cref="global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder"/></returns>
        /// <param name="rawUrl">The raw URL to use for the request builder.</param>
        public global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder WithUrl(string rawUrl)
        {
            return new global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder(rawUrl, RequestAdapter);
        }
        /// <summary>
        /// [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)Delete the ACLs that match the search criteria.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class AclsRequestBuilderDeleteQueryParameters 
        {
            /// <summary>The ACL host.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("host")]
            public string? Host { get; set; }
#nullable restore
#else
            [QueryParameter("host")]
            public string Host { get; set; }
#endif
            /// <summary>The ACL operation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("operation")]
            public string? Operation { get; set; }
#nullable restore
#else
            [QueryParameter("operation")]
            public string Operation { get; set; }
#endif
            /// <summary>The ACL pattern type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("pattern_type")]
            public string? PatternType { get; set; }
#nullable restore
#else
            [QueryParameter("pattern_type")]
            public string PatternType { get; set; }
#endif
            /// <summary>The ACL permission.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("permission")]
            public string? Permission { get; set; }
#nullable restore
#else
            [QueryParameter("permission")]
            public string Permission { get; set; }
#endif
            /// <summary>The ACL principal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("principal")]
            public string? Principal { get; set; }
#nullable restore
#else
            [QueryParameter("principal")]
            public string Principal { get; set; }
#endif
            /// <summary>The ACL resource name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resource_name")]
            public string? ResourceName { get; set; }
#nullable restore
#else
            [QueryParameter("resource_name")]
            public string ResourceName { get; set; }
#endif
            /// <summary>The ACL resource type.</summary>
            [Obsolete("This property is deprecated, use ResourceTypeAsAclResourceType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resource_type")]
            public string? ResourceType { get; set; }
#nullable restore
#else
            [QueryParameter("resource_type")]
            public string ResourceType { get; set; }
#endif
            /// <summary>The ACL resource type.</summary>
            [QueryParameter("resource_type")]
            public global::KafkaRestProxy.Client.Models.AclResourceType? ResourceTypeAsAclResourceType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class AclsRequestBuilderDeleteRequestConfiguration : RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderDeleteQueryParameters>
        {
        }
        /// <summary>
        /// [![Generally Available](https://img.shields.io/badge/Lifecycle%20Stage-Generally%20Available-%2345c6e8)](#section/Versioning/API-Lifecycle-Policy)Return a list of ACLs that match the search criteria.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class AclsRequestBuilderGetQueryParameters 
        {
            /// <summary>The ACL host.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("host")]
            public string? Host { get; set; }
#nullable restore
#else
            [QueryParameter("host")]
            public string Host { get; set; }
#endif
            /// <summary>The ACL operation.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("operation")]
            public string? Operation { get; set; }
#nullable restore
#else
            [QueryParameter("operation")]
            public string Operation { get; set; }
#endif
            /// <summary>The ACL pattern type.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("pattern_type")]
            public string? PatternType { get; set; }
#nullable restore
#else
            [QueryParameter("pattern_type")]
            public string PatternType { get; set; }
#endif
            /// <summary>The ACL permission.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("permission")]
            public string? Permission { get; set; }
#nullable restore
#else
            [QueryParameter("permission")]
            public string Permission { get; set; }
#endif
            /// <summary>The ACL principal.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("principal")]
            public string? Principal { get; set; }
#nullable restore
#else
            [QueryParameter("principal")]
            public string Principal { get; set; }
#endif
            /// <summary>The ACL resource name.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resource_name")]
            public string? ResourceName { get; set; }
#nullable restore
#else
            [QueryParameter("resource_name")]
            public string ResourceName { get; set; }
#endif
            /// <summary>The ACL resource type.</summary>
            [Obsolete("This property is deprecated, use ResourceTypeAsAclResourceType instead")]
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
            [QueryParameter("resource_type")]
            public string? ResourceType { get; set; }
#nullable restore
#else
            [QueryParameter("resource_type")]
            public string ResourceType { get; set; }
#endif
            /// <summary>The ACL resource type.</summary>
            [QueryParameter("resource_type")]
            public global::KafkaRestProxy.Client.Models.AclResourceType? ResourceTypeAsAclResourceType { get; set; }
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class AclsRequestBuilderGetRequestConfiguration : RequestConfiguration<global::KafkaRestProxy.Client.Clusters.Item.Acls.AclsRequestBuilder.AclsRequestBuilderGetQueryParameters>
        {
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.16.0")]
        public partial class AclsRequestBuilderPostRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
